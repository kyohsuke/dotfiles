# vim: filetype=fish foldmethod=marker

function __source -a fileName
    test -f "$fileName"
    and source "$fileName"
end

function __add_path -a pathName
    test -d "$pathName"
    and set -gx PATH "$pathName" $PATH
end

function __add_manpath -a pathName
    test -d "$pathName"
    and set -gx MANPATH "$pathName" $MANPATH
end

# {{{ rustup
__add_path "$HOME/.cargo/bin"
# }}}
# {{{ docker-machine
command -v docker-machine >/dev/null
and _evalcache docker-machine env default
# }}}

# {{{ Homebrew
test -x "/usr/local/bin/brew"
and set -l BREW_BIN "/usr/local/bin/brew"

test -x "/opt/homebrew/bin/brew"
and set -l BREW_BIN "/opt/homebrew/bin/brew"

test -x "/home/linuxbrew/.linuxbrew/bin/brew"
and set -l BREW_BIN "/home/linuxbrew/.linuxbrew/bin/brew"

test -x "$BREW_BIN"
and _evalcache "$BREW_BIN" shellenv
# }}}

# {{{ anyenv
if test -x "$HOME/.anyenv/bin/anyenv"
    __add_path "$HOME/.anyenv/bin"
    _evalcache anyenv init - fish
    set -f envPath "$HOME/.anyenv/envs"

    # goenv
    if test -x "$envPath/goenv/bin/goenv"
        set -gx GOENV_DISABLE_GOPATH 1
        set -gx GOPATH "$HOME"
        set -gx GOBIN "$HOME/bin"
        set -gx GOCACHE "$HOME/.cache/go-build"
        set -gx GOCOVERDIR "$HOME/.cache/go-covdata"
        if test ! -d "$GOCOVERDIR"
            mkdir -p "$GOCOVERDIR"
        end
        set -gx GOMODCACHE "$HOME/.cache/pkg/mod"
    end

    # pyenv
    if test -x "$envPath/pyenv/bin/pyenv"
        set -gx PYTHONDONTWRITEBYTECODE 1
        set -gx PYENV_VIRTUALENV_DISABLE_PROMPT 1
        set -gx PYTHON_CFLAGS '-march=native -mtune=native'
        switch $DETECT_OSTYPE
            case Darwin
                set -gx PYTHON_CONFIGURE_OPTS "--enable-framework --enable-optimizations --with-lto"
            case Linux
                set -gx PYTHON_CONFIGURE_OPTS "--enable-shared --enable-optimizations --with-lto"
        end
        set -gx PYTHONWARNINGS 'ignore::DeprecationWarning'
    end

    # rbenv
    if test -x "$envPath/rbenv/bin/rbenv"
        set -gx GEM_EDITOR mvim
        set -gx RUBY_YJIT_ENABLE 1
        set -gx UNBUNDLED_COMMANDS rake cap irb
        set -gx RUBY_CONFIGURE_OPTS "--disable-install-doc --disable-install-rdoc"
    end
end
# }}}

# {{{ google cloud SDK
__source "$HOMEBREW_PREFIX/share/google-cloud-sdk/path.fish.inc"
# }}}

# {{{ coreutils
if test -d "$HOMEBREW_PREFIX/opt/coreutils"
    __add_path "$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin"
    __add_manpath "$HOMEBREW_PREFIX/opt/coreutils/libexec/gnuman"
end
# }}}

# {{{ libpq
if test -d "$HOMEBREW_PREFIX/opt/libpq/bin"
    __add_path "$HOMEBREW_PREFIX/opt/libpq/bin"
    __add_manpath "$HOMEBREW_PREFIX/opt/libpq/share/man"
end
# }}}

# {{{ util-linux
if test -d "$HOMEBREW_PREFIX/opt/util-linux"
    __add_path "$HOMEBREW_PREFIX/opt/util-linux/bin"
    __add_path "$HOMEBREW_PREFIX/opt/util-linux/sbin"
    __add_manpath "$HOMEBREW_PREFIX/opt/util-linux/share/man"

    set -gx LDFLAGS "-L$HOMEBREW_PREFIX/opt/util-linux/lib" $LDFLAGS
    set -gx CPPFLAGS "-I$HOMEBREW_PREFIX/opt/util-linux/include" $CPPFLAGS
end
# }}}

# {{{ manpath
__add_manpath "$HOMEBREW_PREFIX/share/man"
# }}}

function _upath
    set -l upath
    for npath in $PATH
        not contains -- $npath $upath
        and set upath $upath $npath
    end
    set -gx PATH $upath
end
_upath

function _umanpath
    set -l upath
    for npath in $MANPATH
        not contains -- $npath $upath
        and set upath $upath $npath
    end
    set -gx MANPATH $upath
end
_umanpath

test -f "$HOME/.fishrc.local"
and source "$HOME/.fishrc.local"
