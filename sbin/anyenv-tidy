#!/usr/bin/env bash
#
# Summary: Remove all unused versions of **env.
#
# Usage: anyenv tidy [--dry-run] [<envs>]
#
#  -n/--dry-run       List what would be uninstalled, but do not
#  -q/--quiet         Quiet mode: no printing
#
# For detailed information, see: https://github.com/kyohsuke/anyenv-tidy
#
set -eo pipefail
[ -n "$ANYENV_DEBUG" ] && set -x

# Provide anyenv completions
if [ "$1" = "--complete" ]; then
  echo --dry-run
  echo --quiet
  exec anyenv-envs
fi

if [[ ${BASH_VERSINFO[0]} -lt 4 ]]; then
  sigint_handler () {
    exit 130
  }
  trap sigint_handler SIGINT
fi

usage () {
  anyenv-help tidy 2>/dev/null
  [ -z "$1" ] || exit "$1"
}

parse_options () {
  OPTIONS=()
  ARGUMENTS=()
  local arg option index

  for arg in "$@"; do
    if [ "${arg:0:1}" = "-" ]; then
      if [ "${arg:1:1}" = "-" ]; then
        OPTIONS[${#OPTIONS[*]}]="${arg:2}"
      else
        index=1
        while option="${arg:$index:1}"; do
          [ -n "$option" ] || break
          OPTIONS[${#OPTIONS[*]}]="$option"
          index=$((index+1))
        done
      fi
    else
      ARGUMENTS[${#ARGUMENTS[*]}]="$arg"
    fi
  done
}

get_allenvs () {
  echo "anyenv $(anyenv-envs | tr '\n' ' ')"
}

print_colored() {
  if [ -z "$QUIET" ]; then
    printf "${color}%s${reset}\n" "$1"
  fi
}

anyenv_tidy() {
  if [ "$1" == "anyenv" ]; then
    return 0
  fi

  local VERSIONS
  VERSIONS="$($1 versions 2> /dev/null || true)"
  if [ "$VERSIONS" == "" ]; then
    VERSIONS="$($1 list 2> /dev/null || true)"
  fi

  print_colored "Cleaning '$1'..."

  IFS=$'\n'
  for version in $VERSIONS; do
    # remove leading whitespace characters
    version="${version#"${version%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    version="${version%"${version##*[![:space:]]}"}"

    if [ "$version" == "system" ]; then
      print_colored "Skip version '$version'."
      continue
    fi

    if [[ "$version"  = \** ]]; then
      print_colored "Skip version '$version'."
      continue
    fi


    print_colored "Remove $version..."
    if [ -z "$DRY_RUN" ]; then
      print_colored "$1 uninstall -f $version"
      "$1" uninstall -f "$version"
    else
      print_colored "$1 uninstall -f $version (dry-run)"
    fi
  done

  return 0
}

# Parse command line flags
DRY_RUN=""
QUIET=""

parse_options "$@"
for option in "${OPTIONS[@]}"; do
  case "$option" in
  "h" | "help" )
    usage 0
    ;;
  "n" | "dry-run" )
    DRY_RUN=true
    ;;
  "q" | "quiet" )
    QUIET=true
    ;;
  * )
    echo "no such option: ${option}" >&2
    echo
    usage 1 >&2
    ;;
  esac
done

# Set colored output for TTY
if [ -t 1 ]; then
  color="\e[1;32m"
  reset="\e[0m"
else
  color=""
  reset=""
fi

TARGET_ENVS="${ARGUMENTS[*]}"
if [ "${#ARGUMENTS[@]}" -eq 0 ]; then
  # set all envs when no args are given
  TARGET_ENVS=$(get_allenvs)
fi
for env in $TARGET_ENVS; do
  ENV_ROOT_VALUE=$(echo "${env}_ROOT" | tr '[:lower:]' '[:upper:]')
  ENV_ROOT_VALUE=$(eval echo "\${${ENV_ROOT_VALUE}:-\$($env root)}")

  cd "$ENV_ROOT_VALUE"
  anyenv_tidy "$env"
done
