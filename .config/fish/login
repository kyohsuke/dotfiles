# vim: filetype=fish foldmethod=marker

# {{{ Add Completion Path
test -d "$HOME/.fish-completions"
and set -a fish_complete_path "$HOME/.fish-completions"
test -d "$XDG_CONFIG_HOME/fish/indivisuals/completions"
and set -a fish_complete_path "$XDG_CONFIG_HOME/fish/indivisuals/completions"
# }}}

# {{{ Add Function Path
test -d "$HOME/.fish-functions"
set -a fish_function_path "$HOME/.fish-functions"
test -d "$XDG_CONFIG_HOME/fish/indivisuals/functions"
set -a fish_function_path "$XDG_CONFIG_HOME/fish/indivisuals/functions"
# }}}
# {{{ Change Key Bindings
test $fish_key_bindings != fish_vi_key_bindings
and fish_vi_key_bindings
# }}}
# {{{ KeyBindings
function fish_user_key_bindings
    bind -s -M default -m insert \cc cancel-commandline repaint-mode force-repaint
    bind -s -M visual -m insert \cc end-selection cancel-commandline repaint-mode force-repaint

    bind -s -M insert \co __ghq_cd
    bind -s -M insert \ch __peco_history
    bind -s -M insert \ck __peco_branch

    bind -s -M default -m insert \n execute repaint-mode force-repaint
    bind -s -M default -m insert \r execute repaint-mode force-repaint
    bind -s -M visual -m insert \n end-selection repaint-mode force-repaint
    bind -s -M visual -m insert \r end-selection repaint-mode force-repaint

    # Accept Autosuggestion like python prompt Kit
    bind -s -M insert \ce accept-autosuggestion

    bind -s -M visual -m default d "fish_clipboard_copy; commandline -f kill-selection end-selection repaint-mode;"
    bind -s -M visual -m default y "fish_clipboard_copy; commandline -f end-selection repaint-mode;"
    bind -s -M visual -m default p __visual_paste
    bind -s -M visual -m default P "__visual_paste \"large\""

    function __visual_paste -a large
        # vim like visual paste
        set -l buffer (commandline -b)
        set -l cursor (commandline -C)
        set -l selStart (commandline -B)
        set -l selEnd (commandline -E)
        set -l clipboard (fish_clipboard_paste)

        set -l selBefore ""
        if test $selStart -gt 0
            set selBefore (string sub -e $selStart $buffer)
        end
        set -l currentSelected (string sub -s (math $selStart + 1) -e $selEnd $buffer)
        set -l selAfter (string sub -s (math $selEnd + 1) $buffer)

        if test -z "$large"
            echo -n "$currentSelected" | fish_clipboard_copy
        end

        commandline --replace "$selBefore$clipboard$selAfter"
        commandline -f end-selection force-repaint repaint-mode
        commandline -C (math $selEnd - 1)
    end

    bind -s -M default p fish_clipboard_paste
    bind -s -M default P fish_clipboard_paste
end
# }}}
# {{{ check_ssh_config
type -q check_ssh_config
and check_ssh_config
# }}}
# {{{ Direnv
command -q direnv
and _evalcache direnv hook fish
# }}}
# {{{ Add home path
test -d "$HOME/sbin"
and fish_add_path --global --move --path "$HOME/sbin"

test -d "$HOME/bin"
fish_add_path --global --move --path "$HOME/bin"
# }}}
# {{{ Aliases
set -f vim_version (vim --version | head -1 | sed 's/^.*\ \([0-9]\)\.\([0-9]\)\ .*$/\1\2/')

test -f "/Applications/MacVim.app/Contents/MacOS/Vim"
and alias vim='/Applications/MacVim.app/Contents/MacOS/Vim'

# test -f "/usr/share/vim/vim$vim_version/macros/less.sh"
# and alias less="/usr/share/vim/vim$vim_version/macros/less.sh"

abbr -a gup git pull --rebase
abbr -a rm rm -i
abbr -a df df -h
abbr -a bc bc -l
abbr -a scrr screen -U -D -RR
abbr -a diff diff -W $COLUMNS
abbr -a locate mdfind -name
abbr -a top top -o cpu
abbr -a cat bat
abbr -a cp cp -v -i
abbr -a mv mv -v -i
abbr -a gce "gcloud compute ssh --zone=us-west1-a --tunnel-through-iap"
abbr -a youtube --set-cursor "streamlink '%'"

# Enable AWS CLI autocompletion: github.com/aws/aws-cli/issues/1079
command -q aws
and complete --command aws --no-files --arguments '(begin; set --local --export COMP_SHELL fish; set --local --export COMP_LINE (commandline); aws_completer | sed \'s/ $//\'; end)'

# Add alias for docker-compose
command -q docker-compose
and alias dcs='docker stats $(docker-compose ps -q || echo "#")'
# }}}

# {{{ Set LS_COLORS
test -z $LS_COLORS
and command -q dircolors
and test -f "$XDG_CONFIG_HOME/dircolors/config"
and set -gx LS_COLORS (dircolors -c "$XDG_CONFIG_HOME/dircolors/config" | string split ' ' | string replace -a "'" '')[3]

test -z $LS_COLORS
and command -q gdircolors
and test -f "$XDG_CONFIG_HOME/dircolors/config"
and set -gx LS_COLORS (gdircolors -c "$XDG_CONFIG_HOME/dircolors/config" | string split ' ' | string replace -a "'" '')[3]

if command -q gls
    set -gx __fish_ls_command gls
    set -gx __fish_ls_color_opt "--color=auto"
    set -gx __fish_ls_indicators_opt "-F"
end

# }}}

# {{{ terragrunt
command -q terragrunt
and complete -c terragrunt -w terraform
# }}}

# {{{ go-blueprint
command -q go-blueprint
and _evalcache go-blueprint completion fish
# }}}

# {{{ localstack
command -q localstack
and _evalcache localstack completion fish
# }}}

# {{{ Transient
if type -q __transient_execute
    functions --copy fish_prompt transient_prompt_func
    function transient_rprompt_func
        date +%T
    end
    function fish_right_prompt
        date +%T
    end
end
# }}}

test -f "$XDG_DATA_HOME/fish/login"
and source "$XDG_DATA_HOME/fish/login"
