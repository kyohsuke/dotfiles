# vim: filetype=fish foldmethod=marker

# {{{ Pragma Once
if test -z $FISHENV_LOAD
    function __source -a fileName
        test -f "$fileName"
        and source "$fileName"
    end

    function __add_path -a pathName
        test -d "$pathName"
        and fish_add_path --global --move --path "$pathName"
    end

    function __add_manpath -a pathName
        test -d "$pathName"
        and set -gx MANPATH "$pathName" $MANPATH
    end

    set -gx EDITOR "gvim"
    set -gx VISUAL "$EDITOR"

    # {{ Set XDG Environments
    set -gx XDG_CONFIG_HOME "$HOME/.config"
    set -gx XDG_CACHE_HOME "$HOME/.cache"
    set -gx XDG_DATA_HOME "$HOME/.local/share"
    set -gx XDG_STATE_HOME "$HOME/.local/state"
    set -gx XDG_RUNTIME_DIR "$TEMPDIR"
    # }}}

    # {{{ Set CFLAGS/CXXFLAGS
    set -l COMMON_FLAGS "-O2 -pipe -march=native"
    set -gx CFLAGS $COMMON_FLAGS $CFLAGS
    set -gx CXXFLAGS $COMMON_FLAGS $CXXFLAGS
    # }}}

    # {{{ Homebrew
    test -x "/usr/local/bin/brew"
    and set -l BREW_BIN "/usr/local/bin/brew"

    test -x "/opt/homebrew/bin/brew"
    and set -l BREW_BIN "/opt/homebrew/bin/brew"

    test -x "/home/linuxbrew/.linuxbrew/bin/brew"
    and set -l BREW_BIN "/home/linuxbrew/.linuxbrew/bin/brew"

    test -x "$BREW_BIN"
    and _evalcache "$BREW_BIN" shellenv fish
    # }}}
    # {{{ anyenv
    if test -x "$HOME/.anyenv/bin/anyenv"
        __add_path "$HOME/.anyenv/bin"
        set -l envPath "$HOME/.anyenv/envs"

        # goenv
        if test -x "$envPath/goenv/bin/goenv"
            set -gx GOENV_DISABLE_GOPATH 1
            set -gx GOENV_PATH_ORDER "front"

            set -gx GOPATH "$HOME"
            set -gx GOCACHE "$XDG_CACHE_HOME/go-build"
            set -gx GOMODCACHE "$XDG_CACHE_HOME/pkg/mod"
            set -gx GOCOVERDIR "$XDG_CACHE_HOME/go-covdata"

            test ! -d "$GOCOVERDIR"
            and mkdir -p "$GOCOVERDIR"
        end

        # pyenv
        if test -x "$envPath/pyenv/bin/pyenv"
            set -l DETECT_OSTYPE (uname)
            set -gx PYTHONDONTWRITEBYTECODE 1
            set -gx PYENV_VIRTUALENV_DISABLE_PROMPT 1
            set -gx PYTHON_CFLAGS "$COMMON_FLAGS"
            set -gx PYTHONWARNINGS 'ignore::DeprecationWarning'

            set -l opts "--enable-optimizations" "--with-lto"

            switch $DETECT_OSTYPE
                case Darwin
                    set opts "--enable-framework"
                case Linux
                    set opts "--enable-shared"
            end

            set -gx PYTHON_CONFIGURE_OPTS $opts
        end

        # rbenv
        if test -x "$envPath/rbenv/bin/rbenv"
            set -gx GEM_EDITOR "$EDITOR"
            set -gx UNBUNDLED_COMMANDS rake cap irb

            set -gx GEM_HOME "$XDG_DATA_HOME/gem"
            set -gx GEM_SPEC_CACHE "$XDG_CACHE_HOME/gem"
            set -gx BUNDLE_APP_CONFIG "$XDG_CONFIG_HOME/bundle"
            set -gx BUNDLE_USER_CONFIG "$XDG_CONFIG_HOME/bundle"
            set -gx BUNDLE_USER_CACHE "$XDG_CACHE_HOME/bundle"
            set -gx BUNDLE_USER_PLUGIN "$XDG_DATA_HOME/bundle"

            if test -x "$BREW_BIN"
                set -l libressl ($BREW_BIN --prefix libressl)

                test -d $libressl
                and set opts "--with-openssl-dir=$libressl" $opts
            end

            set -gx RUBY_CONFIGURE_OPTS "$opts"
        end

        # nodenv
        if test -x "$envPath/rbenv/bin/nodenv"
            set -gx NPM_CONFIG_USERCONFIG "$XDG_CONFIG_HOME/npm/npmrc"
            set -gx NODE_REPL_HISTORY "$XDG_DATA_HOME/node_repl_history"
        end

        _evalcache anyenv init - fish
    end
    # }}}
    # {{{ rustup
    set -gx RUSTUP_HOME "$XDG_DATA_HOME/rustup"
    set -gx CARGO_HOME "$XDG_DATA_HOME/cargo"
    __add_path "$HOMEBREW_PREFIX/opt/rustup/bin"
    __add_path "$CARGO_HOME/bin"
    # }}}
    # {{{ docker-machine
    command -v docker-machine >/dev/null
    and _evalcache docker-machine env default
    # }}}
    # {{{ Docker
    __add_path "$HOME/.docker/bin"
    # }}}
    # {{{ google cloud SDK
    __source "$HOMEBREW_PREFIX/share/google-cloud-sdk/path.fish.inc"
    # }}}
    # {{{ coreutils
    if test -d "$HOMEBREW_PREFIX/opt/coreutils"
        __add_path "$HOMEBREW_PREFIX/opt/coreutils/libexec/gnubin"
        __add_manpath "$HOMEBREW_PREFIX/opt/coreutils/libexec/gnuman"
    end
    # }}}
    # {{{ libpq
    if test -d "$HOMEBREW_PREFIX/opt/libpq/bin"
        __add_path "$HOMEBREW_PREFIX/opt/libpq/bin"
        __add_manpath "$HOMEBREW_PREFIX/opt/libpq/share/man"
    end
    # }}}
    # {{{ util-linux
    if test -d "$HOMEBREW_PREFIX/opt/util-linux"
        __add_path "$HOMEBREW_PREFIX/opt/util-linux/bin"
        __add_path "$HOMEBREW_PREFIX/opt/util-linux/sbin"
        __add_manpath "$HOMEBREW_PREFIX/opt/util-linux/share/man"

        set -gx LDFLAGS "-L$HOMEBREW_PREFIX/opt/util-linux/lib" $LDFLAGS
        set -gx CPPFLAGS "-I$HOMEBREW_PREFIX/opt/util-linux/include" $CPPFLAGS
    end
    # }}}
    # {{{ manpath
    __add_manpath "$HOMEBREW_PREFIX/share/man"
    # }}}
    # {{{ set environments
    for mPath in /usr/share/man /Library/Apple/usr/share/man /Library/Developer/CommandLineTools/usr/share/man
        not contains $mPath $MANPATH
        and test -d $mPath
        and set -gx MANPATH $mPath $MANPATH
    end

    # {{{ pipx
    __add_path "$HOME/.local/bin"
    # }}}

    set -gx GREP_OPTIONS '--color=auto'
    set -gx DISABLE_AUTO_UPDATE true
    set -gx TZ Asia/Tokyo
    set -gx LANG "ja_JP.UTF-8"
    set -gx LESSCHARSET UTF-8
    set -gx OUTPUT_CHARSET UTF-8

    set -gx MONO_GAC_PREFIX "$HOMEBREW_PREFIX"

    test -x "$HOMEBREW_PREFIX/bin/files"
    and set -gx FILES_IGNORE_PATTERN '(^(\.git|\.hg|\.svn|_darcs|\.bzr|tmp|\.vagrant|\.keep|\.log|.tmp|\.DS_Store)$|node_modules)'

    test -x "/usr/local/bin/gpg" # こいつはなぜか /usr/local/bin に link がある
    and set -gx GPG_TTY (tty)

    set -gx HOMEBREW_NO_INSTALL_CLEANUP 1
    set -gx HOMEBREW_BAT 1

    set -gx GNUPGHOME "$XDG_DATA_HOME/gnupg"

    # bat
    if test -x "$HOMEBREW_PREFIX/bin/bat"
        set -gx BAT_PAGER "less -FR"
    end

    # libffi
    test -d "$HOMEBREW_PREFIX/opt/libffi/lib/pkgconfig"
    and set -gx PKG_CONFIG_PATH "$HOMEBREW_PREFIX/opt/libffi/lib/pkgconfig"

    # ansible
    set -gx ANSIBLE_HOME "$XDG_CACHE_HOME/ansible"

    # psql editor
    set -gx PSQL_EDITOR "$EDITOR +\"set syntax=sql\""
    set -gx PSQLRC "$XDG_CONFIG_HOME/pg/psqlrc",
    set -gx PSQL_HISTORY "$XDG_CACHE_HOME/pg/psql_history-:DBNAME",
    set -gx PGPASSFILE "$XDG_CONFIG_HOME/pg/pgpass",
    set -gx PGSERVICEFILE "$XDG_CONFIG_HOME/pg/pg_service.conf"
    not test -d "$XDG_CONFIG_HOME/pg"
    and mkdir "$XDG_CONFIG_HOME/pg"

    not test -d "$XDG_CACHE_HOME/pg"
    and mkdir "$XDG_CACHE_HOME/pg"

    # LSCOLORS
    set -gx LSCOLORS Gxfxcxdxbxegedabagacad

    # cpanm
    set -gx PERL_CPANM_HOME "$XDG_CACHE_HOME/cpanm"

    # sqlite
    set -gx SQLITE_HISTORY "$XDG_STATE_HOME/sqlite_history"

    # inputrc
    set -gx INPUTRC "$XDG_CONFIG_HOME/readline/inputrc"

    # }}}
    # {{{ source .local
    test -f "$HOME/.fishenv.local"
    and source "$HOME/.fishenv.local"
    # }}}
    # {{{ Docker Socket
    test "$HOME/.docker/run/docker.sock"
    and set -gx DOCKER_HOST "unix://$HOME/.docker/run/docker.sock"
    # }}}

    set -gx FISHENV_LOAD 1
end
# }}}
