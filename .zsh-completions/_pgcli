#compdef pgcli
# Based on zsh-completions/_pgsql_utils
# ------------------------------------------------------------------------------
# Copyright (c) 2016 Github zsh-users - http://github.com/zsh-users, Dominic Mitchell, Johann 'Myrkraverk' Oskarsson, Daniel Serodio, J Smith
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the zsh-users nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL ZSH-USERS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for PostgreSQL utils (http://postgresql.org).
#
#  Source: http://www.zsh.org/mla/users/2004/msg01006.html
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Dominic Mitchell <dom+zsh@happygiraffe.net>
#
#  * Johann 'Myrkraverk' Oskarsson <johann@2ndquadrant.com>
#
#  * Daniel Serodio <dserodio@gmail.com> pg_dumpall completion
#
#  * J Smith <dark.panda@gmail.com> pg_restore completion
#
# ------------------------------------------------------------------------------

_pgsql_get_identity () {
    _pgsql_user=${(v)opt_args[(i)-U|--username]}
    _pgsql_port=${(v)opt_args[(i)-p|--port]}
    _pgsql_host=${(v)opt_args[(i)-h|--host]}

    _pgsql_params=(
        ${_pgsql_user:+"--username=$_pgsql_user"}
        ${_pgsql_port:+"--port=$_pgsql_port"}
        ${_pgsql_host:+"--host=$_pgsql_host"}
    )
}

# Postgres Allows specifying the path to the directory containing the
# socket as well as a hostname.
_pgsql_host_or_dir() {
    _alternative \
        'hosts:host:_hosts' \
        'directories:directory:_directories'
}

# This creates a port completion list based on socket files on the
# local computer.  Be default, Postgres puts them in /tmp/ but Debian
# changed that to /var/run/postgresql/ in their packages.
_pgsql_ports() {
    compadd "$@" - /tmp/.s.PGSQL.<->(N:e) /var/run/postgresql/.s.PGSQL.<->(N:e)
}

_pgsql_users () {
    local _pgsql_user _pgsql_port _pgsql_host _pgsql_params
    local _pgsql_user_sql
    _pgsql_get_identity

    # We use _pgsql_port and _pgsql_host directly here instead of
    # _pgsql_params so as to not pick up a partially completed
    # username.
    _pgsql_params=(
        ${_pgsql_port:+"--port=$_pgsql_port"}
        ${_pgsql_host:+"--host=$_pgsql_host"}
    )

    _pgsql_user_sql='select r.rolname from pg_catalog.pg_roles r where r.rolcanlogin = true'

    compadd "$@" - $( psql $_pgsql_params[@] -Aqt -c $_pgsql_user_sql template1 2>/dev/null )

}

_pgsql_tables () {
    local _pgsql_user _pgsql_port _pgsql_host _pgsql_params
    _pgsql_get_identity

    # Need to pull out the database name from the existing arguments.
    # This is going to vary between commands.  Thankfully, it's only
    # used by pg_dump, which always has the dbname in arg1.  If it's
    # not present it defaults to ${PGDATABASE:-$LOGNAME}, which
    # matches (I think) the PostgreSQL behaviour.

    local db
    db=${line[1]:-${PGDATABASE:-$LOGNAME}}

    ## Instead of parsing the output of the psql \ commands, we look
    ## up the tables ourselves.  The following query has been tested
    ## with Postgres 8.2 - 9.2.

    local _pgsql_table_sql
    _pgsql_table_sql="select n.nspname || '.' || c.relname \
	from pg_catalog.pg_class c \
		left join pg_catalog.pg_namespace n on n.oid = c.relnamespace \
	where c.relkind in ('r', '') \
		and n.nspname <> 'pg_catalog' \
		and n.nspname <> 'information_schema' \
		and n.nspname !~ '^pg_toast' \
		and pg_catalog.pg_table_is_visible( c.oid ) \
	order by 1"

    compadd "$@" - \
        $( psql $_pgsql_params[@] -Aqt -c $_pgsql_table_sql $db 2>/dev/null )
}

_pgsql_schemas () {
    local _pgsql_user _pgsql_port _pgsql_host _pgsql_params
    _pgsql_get_identity

    local db
    db=${line[1]:-${PGDATABASE:-$LOGNAME}}

    local _pgsql_schema_sql="select n.nspname \
        from pg_catalog.pg_namespace n \
        where n.nspname !~ '^pg_' \
            and n.nspname <> 'information_schema' \
        order by 1;"

    compadd "$@" - \
        $( psql $_pgsql_params[@] -Aqt -c $_pgsql_schema_sql $db 2>/dev/null )
}

_pgsql_databases () {
    local _pgsql_user _pgsql_port _pgsql_host _pgsql_params
    _pgsql_get_identity

    local _pgsql_services _pgsql_service_files
    _pgsql_service_files=(
      ~/.pg_service.conf
      $(pg_config --sysconfdir)/pg_service.conf
    )
    _pgsql_services=$( grep -h '^\[.*\]' $_pgsql_service_files 2>/dev/null \
                         | sed -e 's/^\[/service=/' -e 's/\].*$//' )

    local _pgsql_db_sql
    _pgsql_db_sql="select d.datname from pg_catalog.pg_database d \
	where d.datname <> 'template0'"

    compadd "$@" - \
            ${(f)_pgsql_services} \
            $( psql $_pgsql_params[@] -Atq -c $_pgsql_db_sql template1 2>/dev/null )
}

_pgsql_encodings () {
    local _pgsql_user
    _pgsql_get_identity

    local _pgsql_db_sql
    _pgsql_db_sql="select pg_encoding_to_char(i) from generate_series(0,100) i;"

    compadd "$@" - $( psql $_pgsql_params[@] -Atq -c $_pgsql_db_sql template1  )
}


_pgcli () {
    local curcontext="$curcontext" state line expl
    typeset -A opt_args

    _arguments -C -s "-*" \
        {-h+,--host+}':database host:_pgsql_host_or_dir' \
        {-p+,--port+}':database port number:_pgsql_ports' \
        {-U+,--username+}':connect as user:_pgsql_users' \
        {-W,--password}'[force prompt for password]' \
        {-w,--no-password}'[never prompt for password]' \
        --single-connection'[do not use a separate connection for completions]' \
        {-v,--version}'[display client version]' \
        {-d+,--dbname+}':database to connect to:_pgsql_databases' \
        --pgclirc'[location of pgclirc file]' \
        {-D,--dsn}'[use DSN configured into the \[alias_dsn\] section of pgclirc file]' \
  			--row-limit'[set threshold for row limit prompt. Use 0 to disable]' \
  			--less-chatty'[skip intro on startup and goodbye on exit]' \
  			--prompt'[prompt format (Default: "\u@\h:\d> ")]' \
        {-l,--list}'[list available databases, then exit]' \
  			--auto-vertical-output'[automatically switch to vertical output mode if the result is wider than the terminal width]' \
        --help'[display help]' \
        ':PostgreSQL database:_pgsql_databases' \
        ':PostgreSQL user:_pgsql_users'
}
